#!/usr/bin/env python3

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as tick
import h5py
import colorsys
import argparse
import glob
import sys

from hic import flow
from matplotlib.colors import LinearSegmentedColormap
from matplotlib.patches import Circle

aspect = 1/1.618
resolution = 72.27
paperwidth = 364.19536/resolution
paperheight = 273.14662/resolution
textwidth = 307.28987/resolution
textheight = 269.14662/resolution
columnwidth = 0.5*textwidth
textiny, texsmall, texnormal = 5.6, 6.475, 7.0
offblack = '#262626'

plt.rcdefaults()
plt.rcParams.update({
    'font.family': 'sans-serif',
    'font.sans-serif': ['Roboto'],
    'mathtext.fontset': 'custom',
    'mathtext.default': 'it',
    'mathtext.rm': 'sans',
    'mathtext.it': 'sans:italic:medium',
    'mathtext.cal': 'sans', 
    'font.size': texsmall,
    'legend.fontsize': texsmall,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'lines.linewidth': .6,
    'lines.markersize': 2,
    'lines.markeredgewidth': .1,
    'patch.linewidth': .6,
    'axes.linewidth': .4,
    'xtick.major.width': .4,
    'ytick.major.width': .4,
    'xtick.minor.width': .4,
    'ytick.minor.width': .4,
    'xtick.major.size': 1,
    'ytick.major.size': 1,
    'xtick.minor.size': 0.6,
    'ytick.minor.size': 0.6,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'text.color': offblack,
    'axes.edgecolor': offblack,
    'axes.labelcolor': offblack,
    'xtick.color': offblack,
    'ytick.color': offblack,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'image.interpolation': 'none',
    'pdf.fonttype': 42,
})

plot_functions = {}

def plot(f):
    def wrapper(*args, **kwargs):
        print(f.__name__)
        f(*args, **kwargs)
        plt.savefig('{}.pdf'.format(f.__name__))
        plt.close()

    plot_functions[f.__name__] = wrapper

    return wrapper


def finish(despine=True, remove_ticks=False, pad=0.1, h_pad=None, w_pad=None,
           rect=[0, 0, 1, 1]):
    fig = plt.gcf()

    for ax in fig.axes:
        if despine:
            for spine in 'top', 'right':
                ax.spines[spine].set_visible(False)

        if remove_ticks:
            for ax_name in 'xaxis', 'yaxis':
                getattr(ax, ax_name).set_ticks_position('none')
        else:
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')

    fig.tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)


def set_loc(ax, xy=None, nbins=5, steps=[1, 2, 3, 4, 10],
            prune=None, minor=0):
    if xy == 'x':
        axes = ax.xaxis,
    elif xy == 'y':
        axes = ax.yaxis,
    else:
        axes = ax.xaxis, ax.yaxis

    for axis in axes:
        axis.set_major_locator(
            tick.MaxNLocator(nbins=nbins, steps=steps, prune=prune)
        )
        if minor:
            axis.set_minor_locator(tick.AutoMinorLocator(minor))


def fmt_tick(n):
    s = str(float(n))
    if abs(n) > 10 and s.endswith('.0'):
        return s[:-2]
    return s


def desaturate(color, fraction=0.5):
    h, l, s = colorsys.rgb_to_hls(*color[:3])
    return colorsys.hls_to_rgb(h, l, fraction*s)


TRENTO_LABEL = r'T\raisebox{-.5ex}{R}ENTo'


def set_trento_label(legend, i):
    """
    Mark the `i`th label of a legend as containing the T_RENTo logo.

    """
    t = legend.get_texts()[i]
    t.set_usetex(True)
    t.set_y(-.18*t.get_size())
    return legend

@plot
def title_page():
    fig, axes = plt.subplots(nrows=1, ncols=5,
            figsize=(.8*textwidth, textwidth/5))
    files = glob.glob('data/trento/*')

    cdict = plt.cm.Blues._segmentdata.copy()
    cdict['red'][0] = (0, 1, 1)
    cdict['blue'][0] = (0, 1, 1)
    cdict['green'][0] = (0, 1, 1)
    my_cmap = LinearSegmentedColormap('Blues2', cdict)

    for ax, fn in zip(axes, sorted(files)):
        with h5py.File(fn, 'r') as f:
            dens = f['event_0']
            ax.imshow(dens, cmap=my_cmap)
            ax.axis('off')
    finish()

@plot
def yields(): 
    import seaborn as sns
    fig = plt.figure(figsize=(textwidth, aspect*textwidth))

    # generate mock flow data
    M = 10000
    vn = .1, .05, .02, .01
    sampler = flow.Sampler(*vn)
    phi = sampler.sample(M)

    plt.hist(phi, bins=50, range=(-np.pi, np.pi),
            histtype='stepfilled', normed=True, alpha=.5)
    x = np.linspace(-np.pi, np.pi, 1000)
    plt.plot(x, sampler.pdf(x), color='.3')

    plt.xlim(-np.pi, np.pi)
    plt.ylim(ymin=0)
    plt.xlabel(r'$\phi$')
    plt.ylabel(r'$dN/d\phi$')
    finish()

@plot
def harmonics(): 
    import seaborn as sns
    fig = plt.figure(figsize=(textwidth, aspect*textwidth))

    # generate mock flow data
    v2, v3, v4, v5 = .1, .05, .02, .01
    x = np.linspace(-np.pi, np.pi, 1000)
    plt.plot(x, v2*np.cos(2*x)) 
    plt.plot(x, v3*np.cos(3*x))
    plt.plot(x, v4*np.cos(4*x))
    plt.plot(x, v5*np.cos(5*x))
    plt.plot(x, v2*np.cos(2*x) +
                v3*np.cos(3*x) +
                v4*np.cos(4*x) +
                v5*np.cos(5*x),
                color = '.3')

    plt.xlim(-np.pi, np.pi)
    plt.ylim(-.2, .2)
    plt.xlabel(r'$\Delta \phi$')
    plt.ylabel(r'$C(\Delta \phi)$')
    finish()


def thickness_substructure(sys='Pb'):
    fig, axes = plt.subplots(
            nrows=3, ncols=3,
            sharex=True, sharey=True,
            figsize=(.8*textwidth, .8*textwidth)
            )

    cdict = plt.cm.Blues._segmentdata.copy()
    cdict['red'][0] = (0, 1, 1)
    cdict['blue'][0] = (0, 1, 1)
    cdict['green'][0] = (0, 1, 1)
    my_cmap = LinearSegmentedColormap('Blues2', cdict)

    npartons = [3, 5, 20]
    parton_width = [0.2, 0.3, 0.5]

    for row, v in zip(axes, parton_width):
        for ax, m in zip(row, npartons):
            path = 'data/thickness-grid/{}/'.format(sys)
            fn = 'events_{}_{}.hdf'.format(v, m)
            with h5py.File(path + fn, 'r') as f:
                dens = f['event_0'] 
                ax.imshow(dens, cmap=my_cmap)
                ax.set_xticks([])
                ax.set_yticks([])
                if ax.is_last_row():
                    ax.set_xlabel(m, labelpad=5, fontsize=14)
                if ax.is_first_col() and sys is 'Pb':
                    ax.set_ylabel(v, labelpad=5, fontsize=14)
                if ax.is_last_col() and sys is 'p':
                    ax.set_ylabel(v, rotation=-90, labelpad=15,
                            fontsize=14)
                    ax.yaxis.set_label_position('right')
    finish(h_pad=0, w_pad=0, pad=.5)

@plot
def Pb_thickness():
    return thickness_substructure('Pb')

@plot
def p_thickness():
    return thickness_substructure('p')

def proton_shapes(partons=False):
    fig, axes = plt.subplots(nrows=1, ncols=3,
            figsize=(textwidth, textwidth/2.6))

    cdict = plt.cm.Blues._segmentdata.copy()
    cdict['red'][0] = (0, 1, 1)
    cdict['blue'][0] = (0, 1, 1)
    cdict['green'][0] = (0, 1, 1)
    my_cmap = LinearSegmentedColormap('Blues2', cdict)

    fnames = 'p1.hdf', 'p0.hdf', 'p-1.hdf'
    pvals = '$1$', '$0$', '$-1$'


    for fn, ax, p in zip(fnames, axes, pvals):
        if partons:
            fn = 'data/proton_shapes/substructure/{}'.format(fn)
        else:
            fn = 'data/proton_shapes/gaussian/{}'.format(fn)
        with h5py.File(fn, 'r') as f:
            dens = np.array(f['event_0']).T
            ax.imshow(dens, cmap=my_cmap)
            ax.set_xlabel('p={}'.format(p), fontsize=16)
            ax.spines['left'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.set_xticks([])
            ax.set_yticks([])

            origin = 0.5*np.array(dens.shape) 
            b = 1/0.02
            radius = 1/0.02
            n1 = Circle(origin + [0, b/2], radius, fc='none', color=offblack)
            n2 = Circle(origin - [0, b/2], radius, fc='none', color=offblack)
            ax.add_patch(n1)
            ax.add_patch(n2)
    finish(w_pad=-2, pad=1)

@plot
def proton_shapes_gaussian():
    return proton_shapes(partons=False)

@plot
def proton_shapes_substructure():
    return proton_shapes(partons=True)

@plot
def posterior_protons():
    fig, axes = plt.subplots(nrows=2, ncols=4,
            sharex=True, sharey=True,
            figsize=(textwidth, 0.5*textwidth))

    cdict = plt.cm.Blues._segmentdata.copy()
    cdict['red'][0] = (0, 1, 1)
    cdict['blue'][0] = (0, 1, 1)
    cdict['green'][0] = (0, 1, 1)
    my_cmap = LinearSegmentedColormap('Blues2', cdict)

    for n, ax in enumerate(axes.flat):
        with h5py.File('data/trento_protons/protons.hdf', 'r') as f:
            dens = f['event_{}'.format(n)]
            dmax = np.max(dens)
            ax.imshow(dens, my_cmap)
            ax.contour(dens, levels=np.linspace(dmax/3, dmax, 4),
                    colors=offblack, alpha=0.2, linewidths=0.5)
            ax.get_xaxis().set_visible(False)
            ax.get_yaxis().set_visible(False)

    finish()

@plot
def Pb_thick():
    fig, axes = plt.subplots(nrows=1, ncols=2,
            sharex=True, sharey=True,
            figsize=(.9*textwidth, 0.4*textwidth))

    cdict = plt.cm.Blues._segmentdata.copy()
    cdict['red'][0] = (0, 1, 1)
    cdict['blue'][0] = (0, 1, 1)
    cdict['green'][0] = (0, 1, 1)
    my_cmap = LinearSegmentedColormap('Blues2', cdict)

    dens = np.zeros((160, 160))
    with h5py.File('data/justify_substructure/pb.hdf') as f:
        for ev in f.values():
            dens += np.array(ev)
        axes[0].imshow(dens, cmap=my_cmap)
        axes[0].set_title('Optical nucleus', fontsize=10)
        axes[0].set_xticks([])
        axes[0].set_yticks([])
        axes[1].imshow(f['event_0'], cmap=my_cmap)
        axes[1].set_title('Nucleus w/ nucleons', fontsize=10)
        axes[1].set_xticks([])
        axes[1].set_yticks([])
    finish(h_pad=0, w_pad=0, pad=0)


@plot
def p_thick():
    fig, axes = plt.subplots(nrows=1, ncols=2,
            sharex=True, sharey=True,
            figsize=(.9*textwidth, 0.4*textwidth))

    cdict = plt.cm.Blues._segmentdata.copy()
    cdict['red'][0] = (0, 1, 1)
    cdict['blue'][0] = (0, 1, 1)
    cdict['green'][0] = (0, 1, 1)
    my_cmap = LinearSegmentedColormap('Blues2', cdict)

    dens = np.zeros((140, 140))
    with h5py.File('data/justify_substructure/p.hdf') as f:
        for ev in f.values():
            dens += np.array(ev)
        axes[0].imshow(dens, cmap=my_cmap)
        axes[0].set_title('Optical proton', fontsize=10)
        axes[0].set_xticks([])
        axes[0].set_yticks([])
        axes[1].imshow(f['event_4'], cmap=my_cmap)
        axes[1].set_title('Proton w/ partons', fontsize=10)
        axes[1].set_xticks([])
        axes[1].set_yticks([])
    finish(h_pad=0, w_pad=0, pad=0)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('plots', nargs='*')
    args = parser.parse_args()

    if args.plots:
        for i in args.plots:
            if i.endswith('.pdf'):
                i = i[:-4]
            if i in plot_functions:
                plot_functions[i]()
            else:
                print('unknown plot:', i)
    else:
        for f in plot_functions.values():
            f()


if __name__ == "__main__":
    main()
